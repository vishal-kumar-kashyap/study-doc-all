The manifest is needed for the container to recognize the module.Technically, a module that contains only a manifest is still valid.

a component is the object that contains the core functionality. 
The companyId is the primary key of a portal instance.
Loose coupling means you can swap out the persistence layer with little to no change in the model and service layers. 
The model is in the -api module, and the service and persistence layers are in the -service module.

The @Reference annotation on the setters allows Liferay’s OSGi container to inject references to your generated services.

The unbind parameter tells the container there’s no method for unbinding these services.

A user may have permission to view one Entry, view and edit another Entry, and may not be able to access another Entry at all. This is due to a resource permission.

resource.actions.configs=META-INF/resource-actions/default.xml

liferay Elasticsearch engine uses Lucene search library.
Elasticsearch provides some additional features like relevancy scoring and fuzzy search queries.

The annotations @Activate and Deactivate ensure each method is invoked as soon as the Component is started (activated) or when it’s about to be stopped (deactivated).

The asset framework transforms entities into a common format that can be published anywhere in your Site.


View mode: The portlet’s standard mode. Use this mode to access the portlet’s main functionality.
Edit mode: The portlet’s configuration mode. Use this mode to configure a custom view or behavior. For example, the Edit mode of a weather portlet could let you choose a location to retrieve weather data from.
Help mode: A mode that displays the portlet’s help information.

Web applications often follow the Model View Controller (MVC) pattern. But Liferay has developed a groundbreaking new pattern called the Modal Veal Contractor (MVC) pattern. 



Blade CLI is a command line tool that makes it easy for Liferay developers to create, manage, and deploy Liferay projects.

----> "blade init [workspaceName]"
----> The Blade command "blade create -l" lists the project templates.
----> "blade create [options] moduleName".
----> "blade create -t mvc-portlet -p com.liferay.docs.mymodule -c MyMvcPortlet my-module".

In a module folder, execute this command to list the Gradle tasks available: "blade gw tasks"
"blade gw jar"
FOR starting server---"blade server start -b"
"blade deploy"
for redploy -- "blade deploy -w"

Bundle-SymbolicName:  [artifact ID]
Bundle-Version: [version]

lb | grep "Liferay Bookmarks API"
headers 52

Disconnect from the Gogo Shell session:"disconnect"

scr:info [COMPONENT_NAME]

bnd generates the manifest based on a file called bnd.bnd in the project root.
The main difference is that the bnd.bnd file doesn’t specify an Import-Package header. It’s unnecessary because bnd generates it in the MANIFEST.MF file automatically. It’s metadata made easy!



bundles/ (generated) → default folder for Liferay DXP bundles
configs/ → holds Portal server configurations
ext/ → holds Ext modules and Ext WAR files
gradle/ → holds the Gradle wrapper files
modules/ → holds module projects
plugins-sdk/ (generated) → holds plugins from previous releases
themes/ → holds theme projects created with the Liferay Theme Generator, which use the Liferay JS Theme Toolkit
wars/ → holds traditional web application projects
build.gradle → common Gradle build file
gradle-local.properties → sets user-specific properties for your workspace
gradle.properties → specifies the Portal server configuration and project locations
gradlew / gradlew.bat → executes the Gradle command wrapper
pom.xml (only in Workspaces generated by Maven) → common Maven build file
settings.gradle → applies plugins to the Workspace and configures its dependencies
